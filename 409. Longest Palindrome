class Solution {
    public int longestPalindrome(String s) {
        int[] cout = new int[128];
        for (char c: s.toCharArray())
            cout[c]++;

        int a = 0;
        for (int i: cout) {
            a += i / 2 * 2;
            if (a % 2 == 0 && i % 2 == 1)
                a++;
        }
        return a;
    }
}
______________
HASH MAP:: origin
class Solution {
    public int longestPalindrome(String s) {
        HashMap<Character, Integer> map= new HashMap<>();
        char [] a= s.toCharArray();
        int gg=0;
        int goa=0;
        if(s.length()==1)return 1;
        for(int i=0; i<a.length;i++){
            if(map.containsKey(a[i])){
                map.put(a[i],map.get(a[i])+1);
            }
            else{
                map.put(a[i],1);
            }


        }
        //for (Map.Entry entry : map.entrySet()) {
            //System.out.println(entry.getKey() + " " + entry.getValue());
        //}
        for( int entry : map.values()){
            if(entry%2==0){
                gg=gg+ entry;
            }
            else{
                //gg++;
                goa++;
                gg= gg+ entry -1;
            }
            
            

        }
        if(goa>0) gg= gg+1; 
        return gg;
     
        
    }
}
________________________________________________________________________
class Solution {
    public int longestPalindrome(String s) {
        HashMap<Character, Integer> charCounts = new HashMap<>();
        for (char c : s.toCharArray()) {
            charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);
        }
        
        int palindromeLength = 0;
        boolean hasOddCount = false;
        for (int count : charCounts.values()) {
            if (count % 2 == 0) {
                palindromeLength += count;
            } else {
                hasOddCount = true;
                palindromeLength += (count - 1);
            }
        }
        
        if (hasOddCount) {
            palindromeLength++;
        }
        
        return palindromeLength;
    }
}
